TODO
- screen resize bug, maybe will be fixed after we correctly impl render targets
- re-impl shader freeing gc
- impl transparency
  - test with skybox to make sure transparent is drawn after
- impl screenPass properly and make a little chugl-shaderToy playground example
  - make actual chugl example.
  - use UI.text() as text editor field lol, or GText
- Change chugl RenderPass to ScenePass, fix methods
  - e.g. RenderPass should NOT be responsible for setting resolution, RenderTarget should be 
    - (because a RenderTarget can belong to multiple render passes)
- remove the srgb default, it's messing up colors
  - a basic 2D scene (no bloom/tonemapping) can just be GG.rootPass() --> GG.scenePass();
  - add gamma back to OutputPass
- implement RenderTarget class
- test if we can move outputpass vertex shader to @group(1)
- add pipeline/bindgroup gc for R_Shader
  - want to prevent memory leak from say CHydra building new shaders every frame
- check if imgui has multi-window support now for webgpu backend
- add anti aliasing back
- https://gist.github.com/bkaradzic/2e39896bc7d8c34e042b
  - change all instances of #include <cstdio> to #include <stdio.h> etc. (don't use the c++ wrapper, use the c runtime)
  - port geometry builders to use par_shapes

- add dt to FrameUniforms
  - actually can we add everything that shadertoy adds?
- add gamma and per-channel gamma to OutputPass (so u can replicate the Matrix color curve)
- create defines.h, put compilation constants like MATERIAL_MAX_BINDINGS there
- add inverse normal matrix to PER_DRAW instanced draw uniforms
- change RenderPass to ScenePass
- add shader debug info to release build (perhaps as an option in ShaderDef struct field)
- group all the commands of the frame together, submit all at once at end of RenderGraph 


- there is a slow leak somewhere (500kb / min)
  - check if this happens with just chuck (no chugl gg.nextFrame())
  - check if happens with just empty gameloop
  - check if happens with just an event being fired every frame, but no chugl
  - if it happens on empty gameloop and NOT any of the chuck-only tests
    - add logging to arena reallocation, check if I'm forgetting to clear any of the arenas
      - not picked up by xcode leakcheck, suggests its coming from an arena resize
      - but the linear growth of the leak suggests its *not* an arena, because arenas double every time in size
        - but maybe the memory is only picked up by tracker when writing/reading??? (i believe this ithe case on windows, so you can init an arena to several gigs no problem, see ryan fleury post)
        - 
  -  ==Address all of this as part of the great chugl garbage collection refactor==
     - to prevent cycles, remove the GGen.getChild() method. Children GGens only point to their parent, to prevent refcount cycles
        - this way, disconnecting a subgraph will actually free the entire subgraph, because the leaf nodes of
        that subgraph will have refcounts of 0
     -  other resources to look at:
        -  how does box2c track memory? look at their API for requesting memory usage
           -  ideally ChuGL can do the same
        -  Ryan fleury arena talk
        -  eskil steenberg how I program C leak checker
        -  stb leak check

Long-Term
- read wgpu release notes, see about updating to new version and any useful features
- C-port of webgpu-utils shader pipeline layout generator
- study Raylib opengl batcher, can chugl make use of a batcher?
- swap out glm for handmade math
- skeletal animation
  - see obsidian note
  - study raylib gltf importer and animator
  - watch j.blow devlog implementing animation!
- study jdh retro games from scratch (minecraft, doom), impl as chugl examples?
- for PBR, IBL
  - see webgpu-typescript-starter notes.txt
  - anything we can use from https://github.com/google/filament
- add more builtin-shapes
  - see raylib 3d mesh generator
  - https://prideout.net/shapes


2d immediate mode vector graphics libraries to base g2d off of
- raylib 
- freya shapes
- paperjs
- processing/p5
- love.graphics

== Examples ====================
- Mirrors
- Portals
- GUI overlay
- additive blending particle system
- shadertoy in chugl
- pokemon cries!
- fluid sim
  - https://github.com/kishimisu/WebGPU-Fluid-Simulation?tab=readme-ov-file
    - also impl as webgpu-native example
    - CPU implementation, 2003
  - https://www.dgp.toronto.edu/public_user/stam/reality/Research/pdf/GDC03.pdf
  - https://www.shadertoy.com/view/4tGfDW
    - based on https://inria.hal.science/inria-00596050/document published 2011
- computed gotos on command queue flush switch statement
  - https://wren.io/performance.html
    - says saves 5-10% on wren bytecode switch
  - https://eli.thegreenplace.net/2012/07/12/computed-goto-for-efficient-dispatch-tables/
